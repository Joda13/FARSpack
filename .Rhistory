library(fars.packageR)
library(fars.packageR)
fars_read()
?fars_read
library(fars.packageR)
devtools::load_all(".")
fars_read()
?fars_read
devtools::load_all(".")
?fars_read
library(fars.packageR)
library(devtools)
library(roxygen2)
devtools::load_all(".")
library(fars.packageR)
devtools::load_all(".")
library(fars.packageR)
?fars_read
devtools::load_all(".")
library(fars.packageR)
?fars_map_state
?fars_map_state
?fars_map_state
?fars_map_state
?fars_map_state
library(fars.packageR)
library(fars.packageR)
?fars_map_state
?fars_map_state
library(fars.packageR)
?fars_map_state
library(fars.packageR)
?fars_map_state
library(fars.packageR)
library(fars.packageR)
library(fars.packageR)
?fars_read
?fars_read_years
use_readme_md
use_readme_md()
use_vignette("Introduction")
library(testthat)
setwd("C:\Users\Damster\Python\R_Mastering\fars.packageR\tests")
setwd("C:/Users/Damster/Python/R_Mastering/fars.packageR/tests")
library(testthat)
library(fars.packageR)
test_check("fars.packageR")
setwd("C:\Users\Damster\Python\R_Mastering\fars.packageR")
setwd("C:/Users/Damster/Python/R_Mastering/fars.packageR")
library(testthat)
library(fars.packageR)
test_check("fars.packageR")
context('Errors')
test_that('Throws errors', {
throws_error(fars_read_years(2000))
throws_error(fars_summarize_years(2000))
throws_error(make_filename("two thousand thirteen"))
library(mapdata)
throws_error(fars_map_state(13, 2013))
throws_error(fars_map_state(13, 2000))
})
context("File load and summary are correct")
test_that("Multiple years are correctly loaded", {
dfs <- fars_read_years(2013:2015)
expect_that(dfs, is_a("list"))
expect_that(dfs[[1]], is_a("tbl_df"))
expect_equal(length(dfs), 3)
})
test_that("One file is correctly read", {
fn <- make_filename(2013)
df <- fars_read(fn)
expect_that(df, is_a("tbl_df"))
expect_that(nrow(df), is_more_than(0))
})
test_that("FARS summary is correct", {
years <- 2013:2015
df <- fars_summarize_years(years)
expect_that(nrow(df), equals(12))
expect_that(ncol(df), equals(length(years) + 1))
expect_that(names(df)[1], matches("MONTH"))
})
test_that("Executed mapping", {
library(mapdata)
map <- fars_map_state(36, 2014)
expect_that(map, is_null())
})
context('Errors')
test_that('Throws errors', {
throws_error(fars_read_years(2000))
throws_error(fars_summarize_years(2000))
throws_error(make_filename("two thousand thirteen"))
library(mapdata)
throws_error(fars_map_state(13, 2013))
throws_error(fars_map_state(13, 2000))
})
context("File load and summary are correct")
test_that("Multiple years are correctly loaded", {
dfs <- fars_read_years(2013:2015)
expect_that(dfs, is_a("list"))
expect_that(dfs[[1]], is_a("tbl_df"))
expect_equal(length(dfs), 3)
})
test_that("One file is correctly read", {
fn <- make_filename(2013)
df <- fars_read(fn)
expect_that(df, is_a("tbl_df"))
expect_that(nrow(df), is_more_than(0))
})
test_that("FARS summary is correct", {
years <- 2013:2015
df <- fars_summarize_years(years)
expect_that(nrow(df), equals(12))
expect_that(ncol(df), equals(length(years) + 1))
expect_that(names(df)[1], matches("MONTH"))
})
test_that("Executed mapping", {
library(mapdata)
map <- fars_map_state(36, 2014)
expect_that(map, is_null())
})
library(testthat)
library(fars.packageR)
test_check("fars.packageR")
library(devtools)
devtool::use_testthat()
devtools::use_testthat()
devtools::uses_testthat()
installed.package()
installed.packages
context("Errors")
test_that("Throws errors", {
throws_error(fars_read_years(years = 2000))
throws_error(fars_summarize_years(years = 2000))
throws_error(make_filename(years = "two thousand thirteen"))
library(mapdata)
throws_error(fars_map_state(13, 2013))
throws_error(fars_map_state(13, 2000))
})
context("File load and summary are correct")
test_that("Multiple years are correctly loaded", {
dfs <- fars_read_years(2013:2015)
expect_that(dfs, is_a("list"))
expect_that(dfs[[1]], is_a("tbl_df"))
expect_equal(length(dfs), 3)
})
test_that("One file is correctly read", {
fn <- make_filename(2013)
df <- fars_read(fn)
expect_that(df, is_a("tbl_df"))
expect_that(nrow(df), is_more_than(0))
})
test_that("FARS summary is correct", {
years <- 2013:2015
df <- fars_summarize_years(years)
expect_that(nrow(df), equals(12))
expect_that(ncol(df), equals(length(years) + 1))
expect_that(names(df)[1], matches("MONTH"))
})
context("File load and summary are correct")
test_that("Multiple years are correctly loaded", {
dfs <- fars_read_years(2013:2015)
expect_that(dfs, is_a("list"))
expect_that(dfs[[1]], is_a("tbl_df"))
expect_equal(length(dfs), 3)
})
test_that("One file is correctly read", {
fn <- make_filename(2013)
df <- fars_read(fn)
expect_that(df, is_a("tbl_df"))
expect_that(nrow(df), is_more_than(0))
})
make_expectation(2013)
make_filename(2013)
fars_read("accidents_2013.csv.bz2")
fars_read(accidents_2013.csv.bz2)
fars_read("accidents_2013.csv.bz2")
library(dplyr)
test_that("Throws errors", {
throws_error(fars_read_years(years = 2000))
throws_error(fars_summarize_years(years = 2000))
throws_error(make_filename(years = "two thousand thirteen"))
library(mapdata)
throws_error(fars_map_state(13, 2013))
throws_error(fars_map_state(13, 2000))
})
context("File load and summary are correct")
test_that("Multiple years are correctly loaded", {
dfs <- fars_read_years(2013:2015)
expect_that(dfs, is_a("list"))
expect_that(dfs[[1]], is_a("tbl_df"))
expect_equal(length(dfs), 3)
})
#' @examples
#' ex_year <- 2013
#' data <- ex_year %>%
#'   make_filename %>%
#'   fars_read
#' head(data)
#'
#' @export
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
#' It will not check whether the file actually exists, or if the year is reasonable.
#'
#' @param year A character string/integer giving the year of the input data
#'
#' @return A string with the data file name for a specific year
#'
#' @examples
#' make_filename(2013)
#'
#' @export
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
#'
#' @importFrom dplyr mutate select
#' @importFrom magrittr "%>%"
#'
#' @return A data frame including values in data by month or NULL if the year is invalid
#'
#' @examples
#' fars_read_years(c(2013, 2014))
#'
#' @export
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
#' @importFrom dplyr filter
#' @importFrom maps map
#' @importFrom graphics points
#'
#' @return NULL
#'
#' @examples
#' fars_map_state(13,2014)
#'
#' @export
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
make_filename(2013)
fars_read("accidents_2013.csv.bz2")
fars_read_years(2013)
fars_read_years(2013:2015)
fars_read_years(c(2013, 2014))
fars_read("accidents_2013.csv.bz2")
library(readr)
#' @examples
#' ex_year <- 2013
#' data <- ex_year %>%
#'   make_filename %>%
#'   fars_read
#' head(data)
#'
#' @export
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read("accidents_2013.csv.bz2")
fars_read("accidents_2013.csv.bz2")
fars_read_years(2013:2015)
fars_read("accident_2013.csv.bz2")
fars_read("accident_2013.csv.bz2")
fars_read_years(2013:2015)
make_filename(2013)
fars_read("accident_2013.csv.bz2")
fars_read_years(2013:2015)
fars_read(accident_2013.csv.bz2)
fars_read("accident_2013.csv.bz2")
fars_read_years(2013)
View(fars_read)
?fars_read
fars_read("accident_2013.csv.bz2")
fars_read_years(2013)
test_that("Throws errors", {
throws_error(fars_read_years(years = 2000))
throws_error(fars_summarize_years(years = 2000))
throws_error(make_filename(years = "two thousand thirteen"))
library(mapdata)
throws_error(fars_map_state(13, 2013))
throws_error(fars_map_state(13, 2000))
})
context("File load and summary are correct")
test_that("Multiple years are correctly loaded", {
dfs <- fars_read_years(2013:2015)
expect_that(dfs, is_a("list"))
expect_that(dfs[[1]], is_a("tbl_df"))
expect_equal(length(dfs), 3)
})
test_that("One file is correctly read", {
fn <- make_filename(2013)
df <- fars_read(fn)
expect_that(df, is_a("tbl_df"))
expect_that(nrow(df), is_more_than(0))
})
test_that("FARS summary is correct", {
years <- 2013:2015
df <- fars_summarize_years(years)
expect_that(nrow(df), equals(12))
expect_that(ncol(df), equals(length(years) + 1))
expect_that(names(df)[1], matches("MONTH"))
})
test_that("Executed mapping", {
library(mapdata)
map <- fars_map_state(36, 2014)
expect_that(map, is_null())
})
test_that("FARS summary is correct", {
years <- 2013:2015
df <- fars_summarize_years(years)
expect_that(nrow(df), equals(12))
expect_that(ncol(df), equals(length(years) + 1))
expect_that(names(df)[1], equals("MONTH"))
})
test_that("Executed mapping", {
library(mapdata)
map <- fars_map_state(36, 2014)
expect_that(map, is_null())
})
fars_read_years(2013)
fars_summarize_years(2013)
fars_summarize_years(2015)
fars_map_state(13,2013)
library(testthat)
library(fars.packageR)
test_check("fars.packageR")
context("Errors")
test_that("Throws errors", {
throws_error(fars_read_years(years = 2000))
throws_error(fars_summarize_years(years = 2000))
throws_error(make_filename(years = "two thousand thirteen"))
library(mapdata)
throws_error(fars_map_state(13, 2013))
throws_error(fars_map_state(13, 2000))
})
context("File load and summary are correct")
test_that("Multiple years are correctly loaded", {
dfs <- fars_read_years(2013:2015)
expect_that(dfs, is_a("list"))
expect_that(dfs[[1]], is_a("tbl_df"))
expect_equal(length(dfs), 3)
})
test_that("One file is correctly read", {
fn <- make_filename(2013)
df <- fars_read(fn)
expect_that(df, is_a("tbl_df"))
expect_that(nrow(df), is_more_than(0))
})
test_that("FARS summary is correct", {
years <- 2013:2015
df <- fars_summarize_years(years)
expect_that(nrow(df), equals(12))
expect_that(ncol(df), equals(length(years) + 1))
expect_that(names(df)[1], equals("MONTH"))
})
test_that("Executed mapping", {
library(mapdata)
map <- fars_map_state(13, 2013)
expect_that(map, is_null())
})
library(testthat)
library(fars.packageR)
test_check("fars.packageR")
use_readme_md()
git config --global user.name "JoDa13"
git init
